
package speeder.jpa.nbm;

import jakarta.xml.bind.JAXBContext;
import jakarta.xml.bind.JAXBException;
import jakarta.xml.bind.Unmarshaller;
import java.io.FileNotFoundException;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JToolBar;
import org.netbeans.core.spi.multiview.CloseOperationState;
import org.netbeans.core.spi.multiview.MultiViewElement;
import org.netbeans.core.spi.multiview.MultiViewElementCallback;
import org.openide.awt.UndoRedo;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;
import speeder.jpa.data.model.DataModel;
import speeder.jpa.nbm.nodes.DataModelNode;

@MultiViewElement.Registration(displayName = "#LBL_SpeederJpaDataModel_VISUAL",
iconBase = "speeder/jpa/nbm/speeder16.png",
mimeType = "text/speeder-jpa-data-model+xml",
persistenceType = TopComponent.PERSISTENCE_NEVER,
preferredID = "SpeederJpaDataModelVisual",
position = 2000)
@Messages("LBL_SpeederJpaDataModel_VISUAL=Visual")
public final class SpeederJpaDataModelVisualElement extends JPanel implements MultiViewElement, ExplorerManager.Provider
{
    private SpeederJpaDataModelDataObject obj;

    private JToolBar toolbar = new JToolBar();

    private transient MultiViewElementCallback callback;
    
    private Lookup lookup;
    
    private DataModel dataModel;
    
    private ExplorerManager explorerManager;

    public SpeederJpaDataModelVisualElement(Lookup lkp)
    {
        explorerManager = new ExplorerManager();
        obj = lkp.lookup(SpeederJpaDataModelDataObject.class);
        assert obj != null;
        initComponents();

        lookup = ExplorerUtils.createLookup(explorerManager, getActionMap());
        try
        {
            createDataModel();
            DataModelWraper wraper = new DataModelWraper(dataModel);
            explorerManager.setRootContext(new DataModelNode(wraper, dataModel));
        }
        catch (Exception ex)
        {
            Exceptions.printStackTrace(ex);
        }
        spMain.setDividerLocation(300);
    }

    @Override
    public String getName()
    {
        return "SpeederJpaDataModelVisualElement";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        spMain = new javax.swing.JSplitPane();
        tvModel = new speeder.jpa.nbm.SpeederJpaDataModelTree();
        pnNodeDetails = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        spMain.setDividerLocation(200);
        spMain.setResizeWeight(0.4);
        spMain.setLeftComponent(tvModel);
        spMain.setRightComponent(pnNodeDetails);

        add(spMain, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel pnNodeDetails;
    private javax.swing.JSplitPane spMain;
    private speeder.jpa.nbm.SpeederJpaDataModelTree tvModel;
    // End of variables declaration//GEN-END:variables

    @Override
    public JComponent getVisualRepresentation()
    {
        return this;
    }

    @Override
    public JComponent getToolbarRepresentation()
    {
        return toolbar;
    }

    @Override
    public Action[] getActions()
    {
        return new Action[0];
    }

    @Override
    public Lookup getLookup()
    {
        return lookup;
    }

    @Override
    public void componentOpened()
    {
    }

    @Override
    public void componentClosed()
    {
    }

    @Override
    public void componentShowing()
    {
    }

    @Override
    public void componentHidden()
    {
    }

    @Override
    public void componentActivated()
    {
    }

    @Override
    public void componentDeactivated()
    {
    }

    @Override
    public UndoRedo getUndoRedo()
    {
        return UndoRedo.NONE;
    }

    @Override
    public void setMultiViewCallback(MultiViewElementCallback callback)
    {
        this.callback = callback;
    }

    @Override
    public CloseOperationState canCloseElement()
    {
        return CloseOperationState.STATE_OK;
    }

    private void createDataModel() throws JAXBException, FileNotFoundException
    {
        JAXBContext context = JAXBContext.newInstance(DataModel.class);
        Unmarshaller unmarshaller = context.createUnmarshaller();
        dataModel = (DataModel) unmarshaller.unmarshal(obj.getPrimaryFile().getInputStream());
    }

    @Override
    public ExplorerManager getExplorerManager()
    {
        return explorerManager;
    }
}
